import pandas as pd
import glob
import seaborn as sns
import matplotlib.pyplot as plt

cov_glob = glob.glob('./*.coverage')
# print(cov_glob)

def calc_quantile(lst):
    """this function calculates the 0.05 quantile for each of the .coverage file, the .coverage file need to be generated with the target bed file"""
    threshold_lst = []
    for cov in lst:
        sample_name = cov.split('/')[-1].split('.')[0]
        df = pd.read_csv(cov, sep='\t', header=0)
        # df = df[ df['Total_Depth'] != 0] # exclude the 0 because R&D forgot to order some of the spikeins, normally not needed
        threshold_lst.append( [sample_name, df['Total_Depth'].quantile(q=0.05)] )
    
    tdf = pd.DataFrame( threshold_lst, columns = ['sample', '5%_quantile'])
    return tdf

def calc_95_fold_diff(lst):
    """this function calculates the 0.025 and 0.975 quantile for each of the .coverage file and the 95% fold diff
        ,this is a good metric for coverage uniformity. The smaller the number, the better the uniformity
        , the .coverage file need to be generated with the target bed file"""
    threshold_lst = []
    per_base_df_lst = []
    # n = 0
    for cov in lst:
        # if n > 4:
        #     continue
        sample_name = cov.split('/')[-1].split('.')[0]
        print(f'Doing {sample_name}')
        df = pd.read_csv(cov, sep=' ', names=['chr', 'position', 'coverage'])

        index_df = df.set_index(['chr', 'position'])
        index_df.columns = [f'{sample_name}']
        per_base_df_lst.append(index_df)
        quantile_975 = df['coverage'].quantile(q=0.975)
        quantile_025 = df['coverage'].quantile(q=0.025)

        
        threshold_lst.append( [sample_name, quantile_975 , quantile_025, (quantile_975/(quantile_025+1)) ] )
        # n += 1

    print('combining dfs')
    per_base_all_sample_df= pd.concat(per_base_df_lst, axis=1)
    per_base_all_sample_df.fillna(0, inplace=True)

    avg_df = pd.DataFrame({'coverage' : per_base_all_sample_df.mean(axis=1)})
    avg_df.reset_index(inplace=True)
    tdf = pd.DataFrame( threshold_lst, columns = ['sample', '97.5%_quantile', '2.5%_quantile', 'Cental95%_FoldDiff'])
    return tdf, avg_df

def plot_per_base_from_DotCov(df):
    """this func plot per base cov hist from .coverage files generated by mosdepth"""
    # print(sample_name)

    ax = sns.displot(   
                        # bins = 100,
                        binwidth = 2,
                        # discrete=True,
                        aspect=1.5,
                        color='turquoise',
                        data=df['coverage'])
    plt.rcParams.update({'font.size': 14})
    plt.xlim(0,800)
    plt.ylim(0,3000)
    plt.savefig('Avg_PerBaseCovHist.png')
    plt.clf()

def run():
    tdf , avg_per_base_df = calc_95_fold_diff( cov_glob)
    print(avg_per_base_df)
    print('Ploting per base coverage histogram')
    plot_per_base_from_DotCov(avg_per_base_df)

    tdf.to_excel('Central95FoldDiff.xlsx',index=False)
    print('done plotting')
    



if __name__=="__main__":
    run()

